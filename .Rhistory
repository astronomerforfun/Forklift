install.packages("dplyr")
install.packages("ggplot2")
mpg
library(ggplot2)
mpg
diamonds
View(diamonds)
mpg
mpg%>%
filter(hwy > 30)
mpg%<%
filter(hwy > 30)
library(dplyr)
mpg%>%
filter(hwy > 30)
mpg%>%
filter(hwy > 30)
mpg%>%
filter(hwy > 30)
mpg%>%
filter(hwy > 30)
mpg%>%
filter(hwy > 30)
mpg
t <- mpg
View(t)
library(shiny)
runGitHub("https://github.com/astronomerforfun/Observing-List", "astronomerforfun")
install.packages("DT")
install.packages("shinythemes")
install.packages("formattable")
install.packages("scales")
install.packages("zoo")
install.packages("lubridate")
install.packages("reshape2")
install.packages("broom")
install.packages("purrr")
install.packages("tidyr")
install.packages("shiny")
#specify the packages of interest
packages = c("zoo","dplyr","ggplot2","plyr", "Shiny", "shinythemes", "reshape2", "plyr", "lubridate", "tidyr", "broom", "purrr", "DT", "tidyverse")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
library(ggplot2)
mpg
x <- 0
lm(hwy~displ, mpg)
y <- lm(hwy~displ, mpg)
y
class(y)
y[[2]]
y$coefficients[2]
for(i in 1:nrow(mpg)){
x[i] <- y$coefficients[2]
}
x
for(i in 1:nrow(mpg)){
x[i] <- y$coefficients[i][2]
}
x
for(i in 1:nrow(y)){
x[i] <- y[i]$coefficients[2]
}
for(i in 1:nrow(mpg)){
x[i] <- y[i]$coefficients[2]
}
for(i in 1:nrow(mpg)){
x[i] <- y$coefficients[i][[2]]
}
y$coefficients[2]
y
y$coefficients
y$coefficients
for(i in 1:nrow(mpg)){
x[i] <- y$coefficients[[i]][[2]]
}
x[i] <- y$coefficients[[i]][2]
x
y <- lm(hwy~displ, mpg)
x <- 0
for(i in 1:nrow(mpg)){
x[i] <- coefficients(lm(hwy~displ, mpg))[2]
}
x
for(i in 1:nrow(mpg)){
x[i] <- coefficients(lm(hwy[i]~displ[i], mpg))[2]
}
x
for(i in 1:nrow(mpg)){
x[i] <- coefficients(lm(hwy~displ, mpg))[2]
}
x
library(ggplot2)
mpg
mpg$hwy_mean <- mean(mpg$hwy)
mpg$status <- ifelse(mpg$hwy > mpg$hwy_mean, "Doing Good", "Not so much")
View(mpg)
count(mpg$status)
table(mpg$status)
ggplot(mpg, aes(displ, cty, color = status)) + geom_point()
table(mpg$status)
mpg$status2 <- if(mpg$hwy > 25, "Too high" & if(mpg$hwy<18, "too low" & if(mpg$hwy == 26, "perf")))
mpg$status2 <- ifelse(mpg$hwy > 25, "too High", ifelse(mpg$hwy < 25, "Too low", "perf"))
table(mpg$status2)
mpg%>%
spread(status2, hwy)
library(dplyr)
mpg%>%
spread(status2, hwy)
library(reshape)
mpg%>%
spread(status2, hwy)
library(tidyr)
mpg%>%
spread(status2, hwy)
mpg%>%
group_by(status2)%>%
mutate(average = mean(mpg$hwy))%>%
spread(status2, hwy)
mpg%>%
count(status2, hwy)%>%
spread(status2, n)
mpg%>%
count(status2, cty)%>%
spread(status2, n)
mpg%>%
count(status2)%>%
spread(status2, n)
table(mpg$status2)
diamonds
diamonds$class <- ifelse(diamonds$price > 5000, "too high", ifelse(diamonds$price > 10000, "way too high", "perfect"))
table(diamonds$class)
diamonds$class <- ifelse(diamonds$price > 5000, "too high", ifelse(diamonds$price < 5000, "perfect", "way too high"))
diamonds$class <- ifelse(diamonds$price > 5000, "too high", ifelse(diamonds$price < 5000, "perfect", "way too high"))
table(diamonds$class)
diamonds[diamonds$price < 5000,]
lm(price~carat + depth, data = diamonds)
x <- lm(price~carat + depth, data = diamonds)
y <- as.data.frame(price = 4000, depth = 62)
y <- as.data.frame(price = 4000, depth = 62)
y <- as.data.frame("price" = 4000, "depth" = 62)
y <- as.data.frame("price" = 4000, "depth" = 62)
y <- as.data.frame(price = 4000)
y <- as.data.frame(carat, 2, depth .8)
sample(mpg, 10)
sample(mpg, 20)
sample(mpg, 20, replace = t)
sample(mpg, 20, replace = T)
sample(mpg, 20, replace = T)
mpg
sample(mpg, 15, replace = T)
mpg
mpg
mpg[mpg$year > 2000,]
mpg[mpg$year > 2000 & mpg$cyl <4,]
mpg[mpg$year > 2000 & mpg$cyl >4,]
mpg[mpg$year > 2000 & mpg$cyl >6,]
library(ggplot2)
for(i in 1:nrow(mpg)){
if(mpg$hwy[1] > 30){
mpg$status4[i] <- "yehaa"
}else{
mpg$status4[i] <- "not so much"
}
}
View(mpg)
for(i in 1:nrow(mpg)){
if(mpg$hwy[1] > 30){
mpg$status4[i] <- "yehaa"
}else{
mpg$status4[i] <- "not so much"
}
}
for(i in 1:nrow(mpg)){
if(mpg$hwy[1] > 25){
mpg$status4[i] <- "yehaa"
}else{
mpg$status4[i] <- "not so much"
}
}
for(i in 1:nrow(mpg)){
mpg$status5 <- ifelse(mpg$hwy[1] > 25, "yeeha", "no so much")
}
View(mpg)
setwd("~/Work/Shiny/Apps/PoundsApp")
shiny::runApp()
runApp()
runApp()
library(dplyr)
library(readxl)
library(reshape2)
library(reshape)
library(stringr)
library(lubridate)
library(ggplot2)
library(treemap)
library(recommenderlab)
library(BBmisc)
library(tidyr)
#setwd("~/Dropbox/ PROJECTS/POUNDAGE FOLDER/POUNDS VERSION 2 NEW REPORTS W SHINY/test")
######### POUNDS ###################
pounds <- as.data.frame(read_excel("POUNDSRAW08_01_15__07_31_17.xlsx", col_names = F))
#Add ColNames "POUNDS"
colnames(pounds) <- c("DATE", "BILL.TO", "CUSTOMER.NAME", "POUNDS", "TERM CODE")
#Clean up date column in "pounds"
pounds$DATE <- ymd(paste0(pounds$DATE, "-01"))
#Make All NA's "0" for pounds
# remove any additional rows with NA in date column
pounds$POUNDS[is.na(pounds$POUNDS)] <- 0
#pounds <- pounds[!is.na(pounds$DATE),] #inverse function of above
#Cast Pounds in Wide format using dcast for Sales viewing in Shiny
poundsv2 <- dcast(pounds, BILL.TO + CUSTOMER.NAME ~ DATE, fun.aggregate = sum,value.var = "POUNDS")
#Create a Row sum column for 6 mo and 12 mo
Total24 <- rowSums(poundsv2[,3:26])
poundsv3 <- cbind(poundsv2, Total24)
Total6 <- rowSums(poundsv2[,21:26])
poundsv4 <- cbind(poundsv3, Total6)
poundsv4 <- poundsv4[,c(1:26,29,28)]
#filter pounds 10k lbs and over
poundsv4 <- poundsv4%>%
filter(Total24 > 5000)
#####################POUNDS SLOPES##############################
dates2 <- names(poundsv4%>% select(-c(1,2,27:28)))
# Pull out only data associated with months for lm function
poundsv5 <- poundsv4[,dates2]
# Convert to dataframe and transpose ("t function") in order to use lm
tpounds <- as.data.frame(base::t(poundsv5))
# initialize empty list to append slopes to
no_custs <- 1:length(tpounds)
slope <- data.frame()
for(i in c(1,2,3,4)){
sub_tpounds <- tpounds[(25-(i*6)):24,]
#subset tpounds for only the last i months
for(j in no_custs){
slope[j,i] <- coefficients(lm(sub_tpounds[,j] ~ c(1:(i*6)), sub_tpounds))[2]
}
}
colnames(slope) <- c("6 MO SLOPE", "12 MO SLOPE", "18 MO SLOPE",
"24 MO SLOPE")
poundsv6 <- cbind(slope, poundsv4)
poundsv7 <- poundsv6[,c(5,6,1,2,3,4,31,32)]
colsfornorm <- c("24 MO SLOPE", "18 MO SLOPE", "12 MO SLOPE",
"6 MO SLOPE")
for(i in colsfornorm){
poundsv7[,i] <- normalize(poundsv7[,i], method = "standardize", range = c(0,1))
}
###########SALESPEOPLE#################
salespersondata <- as.data.frame(read_excel("BILL.TO.SALESPERSON.xlsx", col_names = FALSE))
colnames(salespersondata) <- c("Customer Name","BILL.TO", "SALESPERSON")
#remove unwanted columns
salespdatav1 <- salespersondata[,c(2,3)]
salespdatav1$ALL <- "ALL"
salespdatav1 <- gather(salespdatav1,key="BILL.TO")
salespdatav1 <- salespdatav1[,-2]
colnames(salespdatav1) <- c("BILL.TO", "SALESPERSON")
#Remove unwanted Rows by matching only those values in each of the Df's below
salesdatav2 <- semi_join(salespdatav1, poundsv4)
#Creat a data table to rename df
#dput(unique(salesdatav2$SALESPERSON))
oldnames <- c("ALL", "LZ", "MVK", "HJM", "DD", "H", "SH", "MDH", "SDH", "MTM", "DAV",
"GPN", "EGD", "NEW", "PH", "SD2", "RR")
newnames <- c("ALL", "LINDA ZELLNER", "MARK KIMBALL", "HERB MIMNAUGH", "DAVE DELLINO", "HOUSE", "SEATTLE HOUSE", "MARK HICKS", "SAN DIEGO HOUSE", "MTM", "DAVE DYER",
"GRANT NORMAN", "EMERALDA DERAGON", "NEW", "PORTLAND HOUSE", "SAN DIEGO 2", "ROB ROSEN")
datatable2 <- as.data.frame(cbind(oldnames, newnames))
new3 <- salesdatav2 #necessary for lapply (create a vector of df)
new3[] <- lapply(salesdatav2, function(x) datatable2$newnames[match(x, datatable2$oldnames)])
salesdatav3 <- cbind(new3, salesdatav2)
salesdatav3 <- salesdatav3[,c(3,2)]
#Change Salesperson from factor to character
salesdatav3$SALESPERSON <- as.character(salesdatav3$SALESPERSON)
#Remove NA's
nas <- which(is.na(salesdatav3))
salesdatav3 <- salesdatav3[-nas,]
#####GROSS SALES#######
grosssales <- as.data.frame(read_excel("GROSS SALES.xlsx",
col_names = FALSE))
#colnames
colnames(grosssales) <- c("DATE", "BILL.TO", "CUSTOMER.NAME", "GROSS.SALES", "TERM.CODE")
#fix date column
grosssales$DATE <- ymd(paste(grosssales$DATE, "-01"))
#NA's to zero in the Gross Sales column for decast
grosssales$GROSS.SALES[is.na(grosssales$GROSS.SALES)] <- 0
#take out Date NA's
grosssalesv2 <- grosssales[!is.na(grosssales$DATE),]
#cast in long format
grosssalesv3 <- dcast(grosssales, BILL.TO + CUSTOMER.NAME ~ DATE, fun.aggregate = sum,value.var = "GROSS.SALES")
#Sum Rows
grosssalesv3$TOTAL <- rowSums(grosssalesv3[,3:26])
#take out phantom column '27'
grosssalesv3 <- grosssalesv3[,-27]
################################GROSS MARGIN###########################################
margin <- as.data.frame(read_excel("GROSS MARGIN PLUS OUTSIDE CA.xlsx"))
#take out NA's in DF
options(scipen = 99999)
margin[is.na(margin)] <- 0
margin$YTD.MARGIN.PERCENT <- margin$YTD.GROSS.M./margin$YTD.SALES
margin$LYR.MARGIN.PERCENT <- margin$LYR.GROSS.MARGIN/margin$LYR.ASALES
margin$PERC.VARIANCE <- margin$YTD.MARGIN.PERCENT - margin$LYR.MARGIN.PERCENT
margin[is.na(margin)] <- 0
#Select columns needed
margin <- margin[,-c(4,6)]
#Add big mark
#colnamesforcommas <- c("YTD.SALES", "YTD.GROSS.M.",
#                       "LYR.ASALES", "LYR.GROSS.MARGIN")
#for(i in colnamesforcommas){
#  margin[,i] <- format(margin[,i], big.mark = ",", trim = T)
#}
margin$BILL.TO <- margin$ACCT
margin <- margin[,c(12,3,10,9,11,7,5,8,6)]
colnames(margin) <- c("BILL.TO", "CUSTOMER NAME", "LAST YEAR MARGIN %", "YTD MARGIN %",
"VARIANCE %", "LAST YEAR SALES", "YTD SALES", "LAST YEAR GROSS.MARGIN",
"YTD GROSS MARGIN")
#For Loop for digits
#namesforround <- c("LAST YEAR MARGIN %", "YTD MARGIN %",
# "VARIANCE %")
#for(i in namesforround){
# margin[,i] <- formatC(margin[,i], format = "f", digits = 2)
#}
#Filter out BillTo's with "O" as the BILL.TO number
margin <- filter(margin, !BILL.TO == 0)
#For Formatting Tables
pformat <- function(x){
f <- round(x*100, 2)
p <- paste0(f,"%")
return(p)
}
#format $ signs and commas
dformat <- function(x){
decimals <- format(round(x, digits = 0), trim = T, big.mark = ",", big.interval = 3L)
sign <- paste0("$", decimals)
return(sign)
}
dec <- function(x){
y <- format(round(x, digits = 2), trim = T)
return(y)
}
#############DOWNLOAD MODULES################
csvDownloadUI <- function(id, label = "Download CSV") {
ns <- NS(id)
downloadButton(ns("download"), label)
}
## allow users of the module to input a (reactive) data.frame to download as csv and a name for the file
csvDownload <- function(input, output, session, data,
filename = paste0("MARGIN", Sys.Date(), ".csv")) {
output$download <- downloadHandler(
filename = function() {
filename
},
content = function(file) {
write.csv(data(), file)
}
)
}
pounds <- as.data.frame(read_excel("POUNDSRAW08_01_15__07_31_17.xlsx", col_names = F))
colnames(pounds) <- c("DATE", "BILL.TO", "CUSTOMER.NAME", "POUNDS", "TERM CODE")
pounds$DATE <- ymd(paste0(pounds$DATE, "-01"))
pounds$POUNDS[is.na(pounds$POUNDS)] <- 0
poundsv2 <- dcast(pounds, BILL.TO + CUSTOMER.NAME ~ DATE, fun.aggregate = sum,value.var = "POUNDS")
Total24 <- rowSums(poundsv2[,3:26])
poundsv3 <- cbind(poundsv2, Total24)
poundsv3 <- cbind(poundsv2, Total24)
Total6 <- rowSums(poundsv2[,21:26])
poundsv4 <- cbind(poundsv3, Total6)
poundsv4 <- poundsv4[,c(1:26,29,28)]
poundsv4 <- poundsv4%>%
filter(Total24 > 5000)
dates2 <- names(poundsv4%>% select(-c(1,2,27:28)))
# Pull out only data associated with months for lm function
poundsv5 <- poundsv4[,dates2]
# Convert to dataframe and transpose ("t function") in order to use lm
tpounds <- as.data.frame(base::t(poundsv5))
# initialize empty list to append slopes to
no_custs <- 1:length(tpounds)
slope <- data.frame()
for(i in c(1,2,3,4)){
sub_tpounds <- tpounds[(25-(i*6)):24,]
#subset tpounds for only the last i months
for(j in no_custs){
slope[j,i] <- coefficients(lm(sub_tpounds[,j] ~ c(1:(i*6)), sub_tpounds))[2]
}
}
colnames(slope) <- c("6 MO SLOPE", "12 MO SLOPE", "18 MO SLOPE",
"24 MO SLOPE")
poundsv6 <- cbind(slope, poundsv4)
poundsv7 <- poundsv6[,c(5,6,1,2,3,4,31,32)]
colsfornorm <- c("24 MO SLOPE", "18 MO SLOPE", "12 MO SLOPE",
"6 MO SLOPE")
for(i in colsfornorm){
poundsv7[,i] <- normalize(poundsv7[,i], method = "standardize", range = c(0,1))
}
salespersondata <- as.data.frame(read_excel("BILL.TO.SALESPERSON.xlsx", col_names = FALSE))
colnames(salespersondata) <- c("Customer Name","BILL.TO", "SALESPERSON")
View(salespersondata)
#remove unwanted columns
salespdatav1 <- salespersondata[,c(2,3)]
salespdatav1$ALL <- "ALL"
salespdatav1 <- gather(salespdatav1,key="BILL.TO")
salespdatav1 <- salespdatav1[,-2]
View(salespdatav1)
salespdatav1 <- gather(salespdatav1,key="BILL.TO")
salespersondata <- as.data.frame(read_excel("BILL.TO.SALESPERSON.xlsx", col_names = FALSE))
colnames(salespersondata) <- c("Customer Name","BILL.TO", "SALESPERSON")
#remove unwanted columns
salespdatav1 <- salespersondata[,c(2,3)]
salespdatav1$ALL <- "ALL"
salespdatav1 <- gather(salespdatav1,key="BILL.TO")
salespersondata <- as.data.frame(read_excel("BILL.TO.SALESPERSON.xlsx", col_names = FALSE))
colnames(salespersondata) <- c("Customer Name","BILL.TO", "SALESPERSON")
#remove unwanted columns
salespdatav1 <- salespersondata[,c(2,3)]
salespdatav1$ALL <- "ALL"
salespdatav1 <- gather(salespdatav1,key="BILL.TO")
setwd("~/Work/Shiny/Apps/Pounds")
runApp()
setwd("~/Work/Shiny/Apps/Forklift")
runApp()
install.packages("forecast")
runApp()
install.packages("ggthemes")
runApp()
runApp()
runApp()
runApp()
